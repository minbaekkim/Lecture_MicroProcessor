
push3_h1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000002a4  00000338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800116  00800116  0000034e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000034e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000380  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c15  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b2  00000000  00000000  00001051  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000522  00000000  00000000  00001a03  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00001f28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000487  00000000  00000000  00002000  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000363  00000000  00000000  00002487  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000027ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6e c0       	rjmp	.+220    	; 0x11a <__vector_15>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ea       	ldi	r30, 0xA4	; 164
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 31       	cpi	r26, 0x16	; 22
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e1       	ldi	r26, 0x16	; 22
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 31       	cpi	r26, 0x19	; 25
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	c0 d0       	rcall	.+384    	; 0x244 <main>
  c4:	ed c0       	rjmp	.+474    	; 0x2a0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <ISeg7Init>:
static unsigned char cnumber[N_BUF]
={16,16,16,16,16};

void ISeg7Init()
{
	SSEG_CONT|=CONT_MASK;
  c8:	82 b3       	in	r24, 0x12	; 18
  ca:	80 6f       	ori	r24, 0xF0	; 240
  cc:	82 bb       	out	0x12, r24	; 18
	DDR_CONT|=CONT_MASK;
  ce:	81 b3       	in	r24, 0x11	; 17
  d0:	80 6f       	ori	r24, 0xF0	; 240
  d2:	81 bb       	out	0x11, r24	; 17
	DDR_DATA = 0xFF;
  d4:	8f ef       	ldi	r24, 0xFF	; 255
  d6:	8a bb       	out	0x1a, r24	; 26

	TCCR0 = (1<<WGM01);
  d8:	88 e0       	ldi	r24, 0x08	; 8
  da:	83 bf       	out	0x33, r24	; 51
	OCR0 = 78;
  dc:	8e e4       	ldi	r24, 0x4E	; 78
  de:	81 bf       	out	0x31, r24	; 49
	TIMSK |=(1<<OCIE0);
  e0:	87 b7       	in	r24, 0x37	; 55
  e2:	82 60       	ori	r24, 0x02	; 2
  e4:	87 bf       	out	0x37, r24	; 55

	TCCR0 |=0x07;
  e6:	83 b7       	in	r24, 0x33	; 51
  e8:	87 60       	ori	r24, 0x07	; 7
  ea:	83 bf       	out	0x33, r24	; 51
  ec:	08 95       	ret

000000ee <ISeg7DispNum>:
}

void ISeg7DispNum(unsigned short num, unsigned short radix)
{
  ee:	9b 01       	movw	r18, r22
	int j;

	TIMSK &= ~(1<<OCIE0);
  f0:	47 b7       	in	r20, 0x37	; 55
  f2:	4d 7f       	andi	r20, 0xFD	; 253
  f4:	47 bf       	out	0x37, r20	; 55
	for (j = 1; j < N_BUF; j++) cnumber[j] =16;
  f6:	e0 e0       	ldi	r30, 0x00	; 0
  f8:	f1 e0       	ldi	r31, 0x01	; 1
  fa:	40 e1       	ldi	r20, 0x10	; 16
  fc:	41 83       	std	Z+1, r20	; 0x01
  fe:	42 83       	std	Z+2, r20	; 0x02
 100:	43 83       	std	Z+3, r20	; 0x03
 102:	44 83       	std	Z+4, r20	; 0x04

	j=0;
	do{
		cnumber[j++]=num%radix;
 104:	b9 01       	movw	r22, r18
 106:	b8 d0       	rcall	.+368    	; 0x278 <__udivmodhi4>
 108:	81 93       	st	Z+, r24
		num/=radix;
 10a:	86 2f       	mov	r24, r22
 10c:	97 2f       	mov	r25, r23
	}while(num);
 10e:	00 97       	sbiw	r24, 0x00	; 0
 110:	c9 f7       	brne	.-14     	; 0x104 <ISeg7DispNum+0x16>

	TIMSK |= (1<<OCIE0);
 112:	87 b7       	in	r24, 0x37	; 55
 114:	82 60       	ori	r24, 0x02	; 2
 116:	87 bf       	out	0x37, r24	; 55
 118:	08 95       	ret

0000011a <__vector_15>:
}

ISR(TIMER0_COMP_vect)
{
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	0b b6       	in	r0, 0x3b	; 59
 126:	0f 92       	push	r0
 128:	2f 93       	push	r18
 12a:	8f 93       	push	r24
 12c:	9f 93       	push	r25
 12e:	ef 93       	push	r30
 130:	ff 93       	push	r31
	static int index = 0;
	SSEG_CONT = ( SSEG_CONT & ~CONT_MASK)|(~(OUTPUT_VALUE<<index)&CONT_MASK);
 132:	22 b3       	in	r18, 0x12	; 18
 134:	80 e1       	ldi	r24, 0x10	; 16
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	00 90 16 01 	lds	r0, 0x0116	; 0x800116 <__data_end>
 13c:	02 c0       	rjmp	.+4      	; 0x142 <__vector_15+0x28>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	0a 94       	dec	r0
 144:	e2 f7       	brpl	.-8      	; 0x13e <__vector_15+0x24>
 146:	80 95       	com	r24
 148:	80 7f       	andi	r24, 0xF0	; 240
 14a:	92 2f       	mov	r25, r18
 14c:	9f 70       	andi	r25, 0x0F	; 15
 14e:	89 2b       	or	r24, r25
 150:	82 bb       	out	0x12, r24	; 18
	SSEG_DATA = ~SegTable[cnumber[index]];
 152:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <__data_end>
 156:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <__data_end+0x1>
 15a:	e0 50       	subi	r30, 0x00	; 0
 15c:	ff 4f       	sbci	r31, 0xFF	; 255
 15e:	e0 81       	ld	r30, Z
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	eb 5f       	subi	r30, 0xFB	; 251
 164:	fe 4f       	sbci	r31, 0xFE	; 254
 166:	80 81       	ld	r24, Z
 168:	80 95       	com	r24
 16a:	8b bb       	out	0x1b, r24	; 27

	index++;
 16c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 170:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
 174:	01 96       	adiw	r24, 0x01	; 1
	if(index == N_SEGMENT) index=0;
 176:	84 30       	cpi	r24, 0x04	; 4
 178:	91 05       	cpc	r25, r1
 17a:	29 f0       	breq	.+10     	; 0x186 <__vector_15+0x6c>
{
	static int index = 0;
	SSEG_CONT = ( SSEG_CONT & ~CONT_MASK)|(~(OUTPUT_VALUE<<index)&CONT_MASK);
	SSEG_DATA = ~SegTable[cnumber[index]];

	index++;
 17c:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x1>
 180:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 184:	04 c0       	rjmp	.+8      	; 0x18e <__vector_15+0x74>
	if(index == N_SEGMENT) index=0;
 186:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <__data_end+0x1>
 18a:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
 18e:	ff 91       	pop	r31
 190:	ef 91       	pop	r30
 192:	9f 91       	pop	r25
 194:	8f 91       	pop	r24
 196:	2f 91       	pop	r18
 198:	0f 90       	pop	r0
 19a:	0b be       	out	0x3b, r0	; 59
 19c:	0f 90       	pop	r0
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	0f 90       	pop	r0
 1a2:	1f 90       	pop	r1
 1a4:	18 95       	reti

000001a6 <key_scan>:
static unsigned char key_scan(void){
	unsigned char out, i, in;

	out = 0x01;
	for (i = 0; i < N_COL; i++) {
		KEY_OUT = ~out;
 1a6:	8e ef       	ldi	r24, 0xFE	; 254
 1a8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		asm("nop"::);
 1ac:	00 00       	nop

		in = (~KEY_IN) & 0xF0;
 1ae:	80 b1       	in	r24, 0x00	; 0
 1b0:	80 95       	com	r24
 1b2:	80 7f       	andi	r24, 0xF0	; 240

		if(in){
 1b4:	69 f4       	brne	.+26     	; 0x1d0 <key_scan+0x2a>
 1b6:	23 e0       	ldi	r18, 0x03	; 3
 1b8:	92 e0       	ldi	r25, 0x02	; 2
static unsigned char key_scan(void){
	unsigned char out, i, in;

	out = 0x01;
	for (i = 0; i < N_COL; i++) {
		KEY_OUT = ~out;
 1ba:	e2 e6       	ldi	r30, 0x62	; 98
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	89 2f       	mov	r24, r25
 1c0:	80 95       	com	r24
 1c2:	80 83       	st	Z, r24
		asm("nop"::);
 1c4:	00 00       	nop

		in = (~KEY_IN) & 0xF0;
 1c6:	80 b1       	in	r24, 0x00	; 0
 1c8:	80 95       	com	r24
 1ca:	80 7f       	andi	r24, 0xF0	; 240

		if(in){
 1cc:	21 f0       	breq	.+8      	; 0x1d6 <key_scan+0x30>
 1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <key_scan+0x2c>
}

static unsigned char key_scan(void){
	unsigned char out, i, in;

	out = 0x01;
 1d0:	91 e0       	ldi	r25, 0x01	; 1
		asm("nop"::);

		in = (~KEY_IN) & 0xF0;

		if(in){
			in += out;
 1d2:	89 0f       	add	r24, r25
			break;
 1d4:	08 95       	ret
		}
		out <<= 1;
 1d6:	99 0f       	add	r25, r25
 1d8:	21 50       	subi	r18, 0x01	; 1

static unsigned char key_scan(void){
	unsigned char out, i, in;

	out = 0x01;
	for (i = 0; i < N_COL; i++) {
 1da:	89 f7       	brne	.-30     	; 0x1be <key_scan+0x18>
		}
		out <<= 1;
	}

	return in;
}
 1dc:	08 95       	ret

000001de <KeyInit>:

static unsigned char key_scan(void);
static unsigned char pin = 0;

void KeyInit(){
	KEY_OUT = 0xF0;
 1de:	80 ef       	ldi	r24, 0xF0	; 240
 1e0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	KEY_DIR = 0x0F;
 1e4:	8f e0       	ldi	r24, 0x0F	; 15
 1e6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 1ea:	08 95       	ret

000001ec <KeyInput>:
}

unsigned char KeyInput(void){
	unsigned char in, in1;

	in = key_scan();
 1ec:	cf 93       	push	r28
 1ee:	db df       	rcall	.-74     	; 0x1a6 <key_scan>
 1f0:	c8 2f       	mov	r28, r24
	while(1){
		_delay_ms(10); _delay_ms(10); _delay_ms(10);
		in1 = key_scan();
		if(in==in1) break;
		in = in1;
 1f2:	01 c0       	rjmp	.+2      	; 0x1f6 <KeyInput+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f4:	c8 2f       	mov	r28, r24
 1f6:	83 ec       	ldi	r24, 0xC3	; 195
 1f8:	99 e0       	ldi	r25, 0x09	; 9
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <KeyInput+0xe>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <KeyInput+0x14>
 200:	00 00       	nop
 202:	83 ec       	ldi	r24, 0xC3	; 195
 204:	99 e0       	ldi	r25, 0x09	; 9
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <KeyInput+0x1a>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <KeyInput+0x20>
 20c:	00 00       	nop
 20e:	83 ec       	ldi	r24, 0xC3	; 195
 210:	99 e0       	ldi	r25, 0x09	; 9
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <KeyInput+0x26>
	unsigned char in, in1;

	in = key_scan();
	while(1){
		_delay_ms(10); _delay_ms(10); _delay_ms(10);
		in1 = key_scan();
 216:	00 c0       	rjmp	.+0      	; 0x218 <KeyInput+0x2c>
 218:	00 00       	nop
		if(in==in1) break;
 21a:	c5 df       	rcall	.-118    	; 0x1a6 <key_scan>
 21c:	c8 13       	cpse	r28, r24
 21e:	ea cf       	rjmp	.-44     	; 0x1f4 <KeyInput+0x8>
 220:	98 2f       	mov	r25, r24
		in = in1;
	}

	if(!(in & 0xF0)){
 222:	90 7f       	andi	r25, 0xF0	; 240
		pin = 0;
 224:	19 f4       	brne	.+6      	; 0x22c <KeyInput+0x40>
 226:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <pin>
		return 0;
	}

	if(pin == in)
 22a:	09 c0       	rjmp	.+18     	; 0x23e <KeyInput+0x52>
 22c:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <pin>
 230:	89 17       	cp	r24, r25
	return 0;

	pin = in;
 232:	21 f0       	breq	.+8      	; 0x23c <KeyInput+0x50>
 234:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <pin>
	return in;
 238:	98 2f       	mov	r25, r24
		pin = 0;
		return 0;
	}

	if(pin == in)
	return 0;
 23a:	01 c0       	rjmp	.+2      	; 0x23e <KeyInput+0x52>

	pin = in;
	return in;
}
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	89 2f       	mov	r24, r25
 240:	cf 91       	pop	r28
 242:	08 95       	ret

00000244 <main>:
int main(){
	unsigned char key;
	unsigned char data = 0;

	ISeg7Init();
	KeyInit();
 244:	41 df       	rcall	.-382    	; 0xc8 <ISeg7Init>
 246:	cb df       	rcall	.-106    	; 0x1de <KeyInit>
	sei();
 248:	78 94       	sei
	ISeg7DispNum(data, 10);
 24a:	6a e0       	ldi	r22, 0x0A	; 10
 24c:	70 e0       	ldi	r23, 0x00	; 0
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	90 e0       	ldi	r25, 0x00	; 0
#include "iseg7.h"
#include "keypad.h"

int main(){
	unsigned char key;
	unsigned char data = 0;
 252:	4d df       	rcall	.-358    	; 0xee <ISeg7DispNum>
	KeyInit();
	sei();
	ISeg7DispNum(data, 10);

	while(1){
		key = KeyInput();
 254:	c0 e0       	ldi	r28, 0x00	; 0
 256:	ca df       	rcall	.-108    	; 0x1ec <KeyInput>
		switch(key){
 258:	82 31       	cpi	r24, 0x12	; 18
 25a:	31 f0       	breq	.+12     	; 0x268 <main+0x24>
 25c:	84 31       	cpi	r24, 0x14	; 20
 25e:	19 f0       	breq	.+6      	; 0x266 <main+0x22>
 260:	81 31       	cpi	r24, 0x11	; 17
 262:	21 f4       	brne	.+8      	; 0x26c <main+0x28>
 264:	02 c0       	rjmp	.+4      	; 0x26a <main+0x26>
			case SW1:
			data +=1;
 266:	cf 5f       	subi	r28, 0xFF	; 255
			case SW2:
			data +=2;
 268:	ce 5f       	subi	r28, 0xFE	; 254
			case SW3:
			data +=3;
			default:
			break;
		}
		ISeg7DispNum(data, 10);
 26a:	cd 5f       	subi	r28, 0xFD	; 253
 26c:	6a e0       	ldi	r22, 0x0A	; 10
 26e:	70 e0       	ldi	r23, 0x00	; 0
 270:	8c 2f       	mov	r24, r28
 272:	90 e0       	ldi	r25, 0x00	; 0
	}
 274:	3c df       	rcall	.-392    	; 0xee <ISeg7DispNum>
 276:	ef cf       	rjmp	.-34     	; 0x256 <main+0x12>

00000278 <__udivmodhi4>:
 278:	aa 1b       	sub	r26, r26
 27a:	bb 1b       	sub	r27, r27
 27c:	51 e1       	ldi	r21, 0x11	; 17
 27e:	07 c0       	rjmp	.+14     	; 0x28e <__udivmodhi4_ep>

00000280 <__udivmodhi4_loop>:
 280:	aa 1f       	adc	r26, r26
 282:	bb 1f       	adc	r27, r27
 284:	a6 17       	cp	r26, r22
 286:	b7 07       	cpc	r27, r23
 288:	10 f0       	brcs	.+4      	; 0x28e <__udivmodhi4_ep>
 28a:	a6 1b       	sub	r26, r22
 28c:	b7 0b       	sbc	r27, r23

0000028e <__udivmodhi4_ep>:
 28e:	88 1f       	adc	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	5a 95       	dec	r21
 294:	a9 f7       	brne	.-22     	; 0x280 <__udivmodhi4_loop>
 296:	80 95       	com	r24
 298:	90 95       	com	r25
 29a:	bc 01       	movw	r22, r24
 29c:	cd 01       	movw	r24, r26
 29e:	08 95       	ret

000002a0 <_exit>:
 2a0:	f8 94       	cli

000002a2 <__stop_program>:
 2a2:	ff cf       	rjmp	.-2      	; 0x2a2 <__stop_program>
